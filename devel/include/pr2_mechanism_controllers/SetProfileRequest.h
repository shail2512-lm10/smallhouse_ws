// Generated by gencpp from file pr2_mechanism_controllers/SetProfileRequest.msg
// DO NOT EDIT!


#ifndef PR2_MECHANISM_CONTROLLERS_MESSAGE_SETPROFILEREQUEST_H
#define PR2_MECHANISM_CONTROLLERS_MESSAGE_SETPROFILEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pr2_mechanism_controllers
{
template <class ContainerAllocator>
struct SetProfileRequest_
{
  typedef SetProfileRequest_<ContainerAllocator> Type;

  SetProfileRequest_()
    : UpperTurnaround(0.0)
    , LowerTurnaround(0.0)
    , upperDecelBuffer(0.0)
    , lowerDecelBuffer(0.0)
    , profile(0.0)
    , period(0.0)
    , amplitude(0.0)
    , offset(0.0)  {
    }
  SetProfileRequest_(const ContainerAllocator& _alloc)
    : UpperTurnaround(0.0)
    , LowerTurnaround(0.0)
    , upperDecelBuffer(0.0)
    , lowerDecelBuffer(0.0)
    , profile(0.0)
    , period(0.0)
    , amplitude(0.0)
    , offset(0.0)  {
  (void)_alloc;
    }



   typedef double _UpperTurnaround_type;
  _UpperTurnaround_type UpperTurnaround;

   typedef double _LowerTurnaround_type;
  _LowerTurnaround_type LowerTurnaround;

   typedef double _upperDecelBuffer_type;
  _upperDecelBuffer_type upperDecelBuffer;

   typedef double _lowerDecelBuffer_type;
  _lowerDecelBuffer_type lowerDecelBuffer;

   typedef double _profile_type;
  _profile_type profile;

   typedef double _period_type;
  _period_type period;

   typedef double _amplitude_type;
  _amplitude_type amplitude;

   typedef double _offset_type;
  _offset_type offset;





  typedef boost::shared_ptr< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetProfileRequest_

typedef ::pr2_mechanism_controllers::SetProfileRequest_<std::allocator<void> > SetProfileRequest;

typedef boost::shared_ptr< ::pr2_mechanism_controllers::SetProfileRequest > SetProfileRequestPtr;
typedef boost::shared_ptr< ::pr2_mechanism_controllers::SetProfileRequest const> SetProfileRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator1> & lhs, const ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator2> & rhs)
{
  return lhs.UpperTurnaround == rhs.UpperTurnaround &&
    lhs.LowerTurnaround == rhs.LowerTurnaround &&
    lhs.upperDecelBuffer == rhs.upperDecelBuffer &&
    lhs.lowerDecelBuffer == rhs.lowerDecelBuffer &&
    lhs.profile == rhs.profile &&
    lhs.period == rhs.period &&
    lhs.amplitude == rhs.amplitude &&
    lhs.offset == rhs.offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator1> & lhs, const ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pr2_mechanism_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "309001fc196b0094f23b1ae2bd672fb2";
  }

  static const char* value(const ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x309001fc196b0094ULL;
  static const uint64_t static_value2 = 0xf23b1ae2bd672fb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_mechanism_controllers/SetProfileRequest";
  }

  static const char* value(const ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 UpperTurnaround\n"
"float64 LowerTurnaround\n"
"float64 upperDecelBuffer\n"
"float64 lowerDecelBuffer\n"
"float64 profile\n"
"float64 period\n"
"float64 amplitude\n"
"float64 offset\n"
;
  }

  static const char* value(const ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.UpperTurnaround);
      stream.next(m.LowerTurnaround);
      stream.next(m.upperDecelBuffer);
      stream.next(m.lowerDecelBuffer);
      stream.next(m.profile);
      stream.next(m.period);
      stream.next(m.amplitude);
      stream.next(m.offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetProfileRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_mechanism_controllers::SetProfileRequest_<ContainerAllocator>& v)
  {
    s << indent << "UpperTurnaround: ";
    Printer<double>::stream(s, indent + "  ", v.UpperTurnaround);
    s << indent << "LowerTurnaround: ";
    Printer<double>::stream(s, indent + "  ", v.LowerTurnaround);
    s << indent << "upperDecelBuffer: ";
    Printer<double>::stream(s, indent + "  ", v.upperDecelBuffer);
    s << indent << "lowerDecelBuffer: ";
    Printer<double>::stream(s, indent + "  ", v.lowerDecelBuffer);
    s << indent << "profile: ";
    Printer<double>::stream(s, indent + "  ", v.profile);
    s << indent << "period: ";
    Printer<double>::stream(s, indent + "  ", v.period);
    s << indent << "amplitude: ";
    Printer<double>::stream(s, indent + "  ", v.amplitude);
    s << indent << "offset: ";
    Printer<double>::stream(s, indent + "  ", v.offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_MECHANISM_CONTROLLERS_MESSAGE_SETPROFILEREQUEST_H
