# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pr2_mechanism_msgs/JointStatistics.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class JointStatistics(genpy.Message):
  _md5sum = "90fdc8acbce5bc783d8b4aec49af6590"
  _type = "pr2_mechanism_msgs/JointStatistics"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message contains the state of one joint of the pr2 robot.
# This message is specificly designed for the pr2 robot. 
# A generic joint state message can be found in sensor_msgs::JointState

# the name of the joint
string name

# the time at which these joint statistics were measured
time timestamp

# the position of the joint in radians
float64 position

# the velocity of the joint in radians per second
float64 velocity

# the measured joint effort 
float64 measured_effort

# the effort that was commanded to the joint.
# the actual applied effort might be different
# because the safety code can limit the effort
# a joint can apply
float64 commanded_effort

# a flag indicating if the joint is calibrated or not
bool is_calibrated

# a flag inidcating if the joint violated one of its position/velocity/effort limits
# in the last publish cycle
bool violated_limits

# the total distance travelled by the joint, measured in radians.
float64 odometer

# the lowest position reached by the joint in the last publish cycle
float64 min_position

# the highest position reached by the joint in the last publish cycle
float64 max_position

# the maximum absolute velocity reached by the joint in the last publish cycle
float64 max_abs_velocity

# the maximum absolute effort applied by the joint in the last publish cycle
float64 max_abs_effort
"""
  __slots__ = ['name','timestamp','position','velocity','measured_effort','commanded_effort','is_calibrated','violated_limits','odometer','min_position','max_position','max_abs_velocity','max_abs_effort']
  _slot_types = ['string','time','float64','float64','float64','float64','bool','bool','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,timestamp,position,velocity,measured_effort,commanded_effort,is_calibrated,violated_limits,odometer,min_position,max_position,max_abs_velocity,max_abs_effort

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointStatistics, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.position is None:
        self.position = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.measured_effort is None:
        self.measured_effort = 0.
      if self.commanded_effort is None:
        self.commanded_effort = 0.
      if self.is_calibrated is None:
        self.is_calibrated = False
      if self.violated_limits is None:
        self.violated_limits = False
      if self.odometer is None:
        self.odometer = 0.
      if self.min_position is None:
        self.min_position = 0.
      if self.max_position is None:
        self.max_position = 0.
      if self.max_abs_velocity is None:
        self.max_abs_velocity = 0.
      if self.max_abs_effort is None:
        self.max_abs_effort = 0.
    else:
      self.name = ''
      self.timestamp = genpy.Time()
      self.position = 0.
      self.velocity = 0.
      self.measured_effort = 0.
      self.commanded_effort = 0.
      self.is_calibrated = False
      self.violated_limits = False
      self.odometer = 0.
      self.min_position = 0.
      self.max_position = 0.
      self.max_abs_velocity = 0.
      self.max_abs_effort = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I4d2B5d().pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.position, _x.velocity, _x.measured_effort, _x.commanded_effort, _x.is_calibrated, _x.violated_limits, _x.odometer, _x.min_position, _x.max_position, _x.max_abs_velocity, _x.max_abs_effort))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.position, _x.velocity, _x.measured_effort, _x.commanded_effort, _x.is_calibrated, _x.violated_limits, _x.odometer, _x.min_position, _x.max_position, _x.max_abs_velocity, _x.max_abs_effort,) = _get_struct_2I4d2B5d().unpack(str[start:end])
      self.is_calibrated = bool(self.is_calibrated)
      self.violated_limits = bool(self.violated_limits)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I4d2B5d().pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.position, _x.velocity, _x.measured_effort, _x.commanded_effort, _x.is_calibrated, _x.violated_limits, _x.odometer, _x.min_position, _x.max_position, _x.max_abs_velocity, _x.max_abs_effort))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.position, _x.velocity, _x.measured_effort, _x.commanded_effort, _x.is_calibrated, _x.violated_limits, _x.odometer, _x.min_position, _x.max_position, _x.max_abs_velocity, _x.max_abs_effort,) = _get_struct_2I4d2B5d().unpack(str[start:end])
      self.is_calibrated = bool(self.is_calibrated)
      self.violated_limits = bool(self.violated_limits)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I4d2B5d = None
def _get_struct_2I4d2B5d():
    global _struct_2I4d2B5d
    if _struct_2I4d2B5d is None:
        _struct_2I4d2B5d = struct.Struct("<2I4d2B5d")
    return _struct_2I4d2B5d
